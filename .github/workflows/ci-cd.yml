name: CI/CD Pipeline - MiApp Segura

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job para testing del Frontend
  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: TrabajoCiber3/Frontend/package-lock.json
        
    - name: Install Frontend dependencies
      run: |
        cd TrabajoCiber3/Frontend
        npm ci
        
    - name: Run Frontend tests
      run: |
        cd TrabajoCiber3/Frontend
        npm test -- --watchAll=false --coverage
        
    - name: Build Frontend
      run: |
        cd TrabajoCiber3/Frontend
        npm run build
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: TrabajoCiber3/Frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  # Job para testing del Backend
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: TrabajoCiber3/Backend/package-lock.json
        
    - name: Install Backend dependencies
      run: |
        cd TrabajoCiber3/Backend
        npm ci
        
    - name: Run Backend tests
      run: |
        cd TrabajoCiber3/Backend
        npm test
        
    - name: Build Backend
      run: |
        cd TrabajoCiber3/Backend
        npm run build

  # Job para anÃ¡lisis de seguridad
  security-scan:
    name: Security Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install dependencies for security scan
      run: |
        cd TrabajoCiber3/Frontend && npm ci
        cd ../Backend && npm ci
        
    - name: Run npm audit
      run: |
        echo "=== Frontend Security Audit ==="
        cd TrabajoCiber3/Frontend
        npm audit --audit-level=moderate
        
        echo "=== Backend Security Audit ==="
        cd ../Backend
        npm audit --audit-level=moderate
        
    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high
        path: TrabajoCiber3/Frontend
        
    - name: Run Snyk security scan (Backend)
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high
        path: TrabajoCiber3/Backend

  # Job para anÃ¡lisis de cÃ³digo
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install dependencies
      run: |
        cd TrabajoCiber3/Frontend && npm ci
        cd ../Backend && npm ci
        
    - name: Run ESLint (Frontend)
      run: |
        cd TrabajoCiber3/Frontend
        npm run lint
        
    - name: Run ESLint (Backend)
      run: |
        cd TrabajoCiber3/Backend
        npm run lint
        
    - name: Run TypeScript check
      run: |
        cd TrabajoCiber3/Frontend && npx tsc --noEmit
        cd ../Backend && npx tsc --noEmit

  # Job para construcciÃ³n de Docker images
  docker-build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-test, security-scan, code-quality]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Build and push Frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./TrabajoCiber3/Frontend
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build and push Backend image
      uses: docker/build-push-action@v5
      with:
        context: ./TrabajoCiber3/Backend
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Job para testing de integraciÃ³n
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: docker-build
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install dependencies
      run: |
        cd TrabajoCiber3/Backend
        npm ci
        
    - name: Run integration tests
      run: |
        cd TrabajoCiber3/Backend
        npm run test:integration
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db

  # Job para deploy (solo en releases)
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [integration-test]
    if: github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to production
      run: |
        echo "ðŸš€ Deploying version ${{ github.event.release.tag_name }} to production"
        # AquÃ­ irÃ­an los comandos de deploy reales
        # Por ejemplo: kubectl apply, docker-compose up, etc.
        
    - name: Notify deployment
      run: |
        echo "âœ… Deployment completed successfully!"
        echo "Version: ${{ github.event.release.tag_name }}"
        echo "Release URL: ${{ github.event.release.html_url }}" 