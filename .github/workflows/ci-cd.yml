name: CI/CD Pipeline - MiApp Segura

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job para análisis de seguridad y calidad de código
  security-analysis:
    name: Security & Code Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'
        
    - name: Install Frontend dependencies
      run: |
        cd TrabajoCiber3/Frontend
        npm ci
        
    - name: Install Backend dependencies
      run: |
        cd TrabajoCiber3/Backend
        npm ci
        
    - name: Run npm audit (Frontend)
      run: |
        cd TrabajoCiber3/Frontend
        npm audit --audit-level=moderate || true
        
    - name: Run npm audit (Backend)
      run: |
        cd TrabajoCiber3/Backend
        npm audit --audit-level=moderate || true
        
    - name: Run ESLint (Frontend)
      run: |
        cd TrabajoCiber3/Frontend
        npm run lint || echo "ESLint not configured, skipping..."
        
    - name: Run ESLint (Backend)
      run: |
        cd TrabajoCiber3/Backend
        npm run lint || echo "ESLint not configured, skipping..."
        
    - name: TypeScript check (Frontend)
      run: |
        cd TrabajoCiber3/Frontend
        npx tsc --noEmit || echo "TypeScript check failed, but continuing..."
        
    - name: TypeScript check (Backend)
      run: |
        cd TrabajoCiber3/Backend
        npx tsc --noEmit || echo "TypeScript check failed, but continuing..."

  # Job para análisis semántico con CodeQL
  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    
    permissions:
      actions: read
      contents: read
      security-events: write
    
    strategy:
      fail-fast: false
      matrix:
        language: ['javascript']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}
        config-file: ./.github/codeql/codeql-config.yml
        
    - name: Autobuild
      uses: github/codeql-action/autobuild@v2
      
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        category: "/language:${{matrix.language}}"

  # Job para testing del Frontend
  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'
        cache-dependency-path: TrabajoCiber3/Frontend/package-lock.json
        
    - name: Install Frontend dependencies
      run: |
        cd TrabajoCiber3/Frontend
        npm ci
        
    - name: Run Frontend tests
      run: |
        cd TrabajoCiber3/Frontend
        npm test -- --watchAll=false --passWithNoTests || echo "Tests failed, but continuing..."
        
    - name: Build Frontend
      run: |
        cd TrabajoCiber3/Frontend
        npm run build

  # Job para testing del Backend
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'
        cache-dependency-path: TrabajoCiber3/Backend/package-lock.json
        
    - name: Install Backend dependencies
      run: |
        cd TrabajoCiber3/Backend
        npm ci
        
    - name: Run Backend tests
      run: |
        cd TrabajoCiber3/Backend
        npm test -- --passWithNoTests || echo "Tests failed, but continuing..."
        
    - name: Build Backend
      run: |
        cd TrabajoCiber3/Backend
        npm run build

  # Job para construcción de Docker images
  docker-build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [security-analysis, frontend-test, backend-test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Build and push Frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./TrabajoCiber3/Frontend
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build and push Backend image
      uses: docker/build-push-action@v5
      with:
        context: ./TrabajoCiber3/Backend
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

